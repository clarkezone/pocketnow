// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: geocacheservice.proto

package geocacheservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeoCacheServiceClient is the client API for GeoCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoCacheServiceClient interface {
	SaveLocations(ctx context.Context, in *Locations, opts ...grpc.CallOption) (*Empty, error)
	GetLastLocation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Location, error)
}

type geoCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoCacheServiceClient(cc grpc.ClientConnInterface) GeoCacheServiceClient {
	return &geoCacheServiceClient{cc}
}

func (c *geoCacheServiceClient) SaveLocations(ctx context.Context, in *Locations, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Geocacheservice.GeoCacheService/SaveLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoCacheServiceClient) GetLastLocation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/Geocacheservice.GeoCacheService/GetLastLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoCacheServiceServer is the server API for GeoCacheService service.
// All implementations must embed UnimplementedGeoCacheServiceServer
// for forward compatibility
type GeoCacheServiceServer interface {
	SaveLocations(context.Context, *Locations) (*Empty, error)
	GetLastLocation(context.Context, *Empty) (*Location, error)
	mustEmbedUnimplementedGeoCacheServiceServer()
}

// UnimplementedGeoCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeoCacheServiceServer struct {
}

func (UnimplementedGeoCacheServiceServer) SaveLocations(context.Context, *Locations) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLocations not implemented")
}
func (UnimplementedGeoCacheServiceServer) GetLastLocation(context.Context, *Empty) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLocation not implemented")
}
func (UnimplementedGeoCacheServiceServer) mustEmbedUnimplementedGeoCacheServiceServer() {}

// UnsafeGeoCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoCacheServiceServer will
// result in compilation errors.
type UnsafeGeoCacheServiceServer interface {
	mustEmbedUnimplementedGeoCacheServiceServer()
}

func RegisterGeoCacheServiceServer(s grpc.ServiceRegistrar, srv GeoCacheServiceServer) {
	s.RegisterService(&GeoCacheService_ServiceDesc, srv)
}

func _GeoCacheService_SaveLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Locations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoCacheServiceServer).SaveLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Geocacheservice.GeoCacheService/SaveLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoCacheServiceServer).SaveLocations(ctx, req.(*Locations))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoCacheService_GetLastLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoCacheServiceServer).GetLastLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Geocacheservice.GeoCacheService/GetLastLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoCacheServiceServer).GetLastLocation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoCacheService_ServiceDesc is the grpc.ServiceDesc for GeoCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Geocacheservice.GeoCacheService",
	HandlerType: (*GeoCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLocations",
			Handler:    _GeoCacheService_SaveLocations_Handler,
		},
		{
			MethodName: "GetLastLocation",
			Handler:    _GeoCacheService_GetLastLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geocacheservice.proto",
}
